"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SimpleBus = void 0;

require("core-js/modules/web.dom-collections.iterator.js");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const packageJson = {
  name: "@nextcloud/event-bus",
  version: "2.1.1",
  description: "",
  main: "dist/index.js",
  types: "dist/index.d.ts",
  scripts: {
    build: "babel ./lib --out-dir dist --extensions '.ts,.tsx' --source-maps && tsc --emitDeclarationOnly",
    "build:doc": "typedoc --out dist/doc lib/index.ts && touch dist/doc/.nojekyll",
    "check-types": "tsc",
    dev: "babel ./lib --out-dir dist --extensions '.ts,.tsx' --watch",
    test: "jest",
    "test:watch": "jest --watchAll"
  },
  keywords: ["nextcloud"],
  homepage: "https://github.com/nextcloud/nextcloud-event-bus#readme",
  author: "Christoph Wurst",
  license: "GPL-3.0-or-later",
  repository: {
    type: "git",
    url: "https://github.com/nextcloud/nextcloud-event-bus"
  },
  dependencies: {
    "@types/semver": "^7.1.0",
    "core-js": "^3.6.2",
    semver: "^7.3.2"
  },
  devDependencies: {
    "@babel/cli": "^7.6.0",
    "@babel/core": "^7.6.0",
    "@babel/plugin-proposal-class-properties": "^7.5.5",
    "@babel/preset-env": "^7.6.0",
    "@babel/preset-typescript": "^7.6.0",
    "@nextcloud/browserslist-config": "^2.1.0",
    "@rollup/plugin-babel": "^5.3.0",
    "@rollup/plugin-commonjs": "^21.0.1",
    "@rollup/plugin-node-resolve": "^13.0.0",
    "babel-jest": "^27.2.1",
    "babel-plugin-inline-json-import": "^0.3.2",
    jest: "^26.0.1",
    rollup: "^2.47.0",
    "rollup-plugin-inject-process-env": "^1.3.1",
    "rollup-plugin-typescript2": "^0.30.0",
    typedoc: "^0.22.4",
    typescript: "^4.0.2"
  },
  browserslist: ["extends @nextcloud/browserslist-config"]
};

class SimpleBus {
  constructor() {
    _defineProperty(this, "handlers", new Map());
  }

  getVersion() {
    return packageJson.version;
  }

  subscribe(name, handler) {
    this.handlers.set(name, (this.handlers.get(name) || []).concat(handler));
  }

  unsubscribe(name, handler) {
    this.handlers.set(name, (this.handlers.get(name) || []).filter(h => h != handler));
  }

  emit(name, event) {
    (this.handlers.get(name) || []).forEach(h => {
      try {
        h(event);
      } catch (e) {
        console.error('could not invoke event listener', e);
      }
    });
  }

}

exports.SimpleBus = SimpleBus;
//# sourceMappingURL=SimpleBus.js.map